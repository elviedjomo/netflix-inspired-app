name: Build & Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set Docker tag from Git SHA
        id: vars
        run: echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          trivy fs .

      - name: Docker build and push
        run: |
          docker build --build-arg TMDB_V3_API_KEY=${{ secrets.TMDB_V3_API_KEY }} -t elviedjomo/netflix:${{ env.TAG }} .
          docker tag elviedjomo/netflix:${{ env.TAG }} elviedjomo/netflix:latest
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push elviedjomo/netflix:${{ env.TAG }}
          docker push elviedjomo/netflix:latest
        env:
          DOCKER_CLI_ACI: 1

  deploy:
    needs: build
    runs-on: [aws-netflix]
    steps:
      - name: Docker login (if needed)
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull the docker image
        run: docker pull elviedjomo/netflix:latest

      - name: Trivy image scan
        run: |
          trivy --version
          trivy image --timeout 5m elviedjomo/netflix:latest

      - name: Remove existing container (if any)
        run: docker rm -f netflix || true

      - name: Run the container
        run: docker run -d --name netflix -p 8081:80 elviedjomo/netflix:latest

      - name: Notify Discord
        run: |
          curl -X POST -H 'Content-Type: application/json' \
          -d '{"content":"âœ… Deployed `netflix` to `http://netflix.yourdomain.com` on port 8081!"}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}
