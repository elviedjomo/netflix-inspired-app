name: Build

on:
  push:
    branches:
      - main


jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: SonarSource/sonarqube-quality-gate-action@v1
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Install Trivy and scan
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          trivy fs .

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=${{ steps.set_tag.outputs.image_tag }}
          docker build --build-arg TMDB_V3_API_KEY=${{ secrets.TMDB_V3_API_KEY }} -t elviedjomo/netflix:$IMAGE_TAG .
          docker tag elviedjomo/netflix:$IMAGE_TAG elviedjomo/netflix:latest
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push elviedjomo/netflix:$IMAGE_TAG
          docker push elviedjomo/netflix:latest

  deploy:
    name: Deploy to EC2 Runner
    needs: build
    runs-on: [aws-netflix]
    timeout-minutes: 15

    steps:
      - name: Set image tag
        run: echo "IMAGE_TAG=${{ needs.build.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull Docker image
        run: |
          echo "Pulling elviedjomo/netflix:${IMAGE_TAG}"
          timeout 120 docker pull elviedjomo/netflix:${IMAGE_TAG}

      - name: Trivy scan on image
        run: |
          echo "Running Trivy scan on image..."
          timeout 300 trivy image elviedjomo/netflix:${IMAGE_TAG}

      - name: Remove old container (if any)
        run: docker rm -f netflix || true

      - name: Run new container
        run: docker run -d --name netflix -p 8081:80 elviedjomo/netflix:${IMAGE_TAG}

